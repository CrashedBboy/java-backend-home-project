/*
 * This file is generated by jOOQ.
 */
package com.test.bank.db;


import com.test.bank.db.tables.Admin;
import com.test.bank.db.tables.Adminrole;
import com.test.bank.db.tables.Role;
import com.test.bank.db.tables.Transaction;
import com.test.bank.db.tables.User;
import com.test.bank.db.tables.records.AdminRecord;
import com.test.bank.db.tables.records.AdminroleRecord;
import com.test.bank.db.tables.records.RoleRecord;
import com.test.bank.db.tables.records.TransactionRecord;
import com.test.bank.db.tables.records.UserRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;
import org.jooq.types.UInteger;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>bank</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AdminRecord, UInteger> IDENTITY_ADMIN = Identities0.IDENTITY_ADMIN;
    public static final Identity<RoleRecord, UInteger> IDENTITY_ROLE = Identities0.IDENTITY_ROLE;
    public static final Identity<TransactionRecord, UInteger> IDENTITY_TRANSACTION = Identities0.IDENTITY_TRANSACTION;
    public static final Identity<UserRecord, UInteger> IDENTITY_USER = Identities0.IDENTITY_USER;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AdminRecord> KEY_ADMIN_PRIMARY = UniqueKeys0.KEY_ADMIN_PRIMARY;
    public static final UniqueKey<AdminroleRecord> KEY_ADMINROLE_PRIMARY = UniqueKeys0.KEY_ADMINROLE_PRIMARY;
    public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = UniqueKeys0.KEY_ROLE_PRIMARY;
    public static final UniqueKey<TransactionRecord> KEY_TRANSACTION_PRIMARY = UniqueKeys0.KEY_TRANSACTION_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AdminroleRecord, AdminRecord> ADMINROLE_IBFK_1 = ForeignKeys0.ADMINROLE_IBFK_1;
    public static final ForeignKey<TransactionRecord, UserRecord> TRANSACTION_IBFK_2 = ForeignKeys0.TRANSACTION_IBFK_2;
    public static final ForeignKey<TransactionRecord, UserRecord> TRANSACTION_IBFK_3 = ForeignKeys0.TRANSACTION_IBFK_3;
    public static final ForeignKey<TransactionRecord, AdminRecord> TRANSACTION_IBFK_1 = ForeignKeys0.TRANSACTION_IBFK_1;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AdminRecord, UInteger> IDENTITY_ADMIN = Internal.createIdentity(Admin.ADMIN, Admin.ADMIN.ID);
        public static Identity<RoleRecord, UInteger> IDENTITY_ROLE = Internal.createIdentity(Role.ROLE, Role.ROLE.ID);
        public static Identity<TransactionRecord, UInteger> IDENTITY_TRANSACTION = Internal.createIdentity(Transaction.TRANSACTION, Transaction.TRANSACTION.ID);
        public static Identity<UserRecord, UInteger> IDENTITY_USER = Internal.createIdentity(User.USER, User.USER.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AdminRecord> KEY_ADMIN_PRIMARY = Internal.createUniqueKey(Admin.ADMIN, "KEY_Admin_PRIMARY", Admin.ADMIN.ID);
        public static final UniqueKey<AdminroleRecord> KEY_ADMINROLE_PRIMARY = Internal.createUniqueKey(Adminrole.ADMINROLE, "KEY_AdminRole_PRIMARY", Adminrole.ADMINROLE.ROLEID, Adminrole.ADMINROLE.ADMINID);
        public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = Internal.createUniqueKey(Role.ROLE, "KEY_Role_PRIMARY", Role.ROLE.ID);
        public static final UniqueKey<TransactionRecord> KEY_TRANSACTION_PRIMARY = Internal.createUniqueKey(Transaction.TRANSACTION, "KEY_Transaction_PRIMARY", Transaction.TRANSACTION.ID);
        public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, "KEY_User_PRIMARY", User.USER.ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<AdminroleRecord, AdminRecord> ADMINROLE_IBFK_1 = Internal.createForeignKey(com.test.bank.db.Keys.KEY_ADMIN_PRIMARY, Adminrole.ADMINROLE, "AdminRole_ibfk_1", Adminrole.ADMINROLE.ADMINID);
        public static final ForeignKey<TransactionRecord, UserRecord> TRANSACTION_IBFK_2 = Internal.createForeignKey(com.test.bank.db.Keys.KEY_USER_PRIMARY, Transaction.TRANSACTION, "Transaction_ibfk_2", Transaction.TRANSACTION.FROMUSERID);
        public static final ForeignKey<TransactionRecord, UserRecord> TRANSACTION_IBFK_3 = Internal.createForeignKey(com.test.bank.db.Keys.KEY_USER_PRIMARY, Transaction.TRANSACTION, "Transaction_ibfk_3", Transaction.TRANSACTION.TOUSERID);
        public static final ForeignKey<TransactionRecord, AdminRecord> TRANSACTION_IBFK_1 = Internal.createForeignKey(com.test.bank.db.Keys.KEY_ADMIN_PRIMARY, Transaction.TRANSACTION, "Transaction_ibfk_1", Transaction.TRANSACTION.ADMINID);
    }
}
