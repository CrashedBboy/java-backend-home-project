/*
 * This file is generated by jOOQ.
 */
package com.test.bank.db.tables;


import com.test.bank.db.Bank;
import com.test.bank.db.Indexes;
import com.test.bank.db.Keys;
import com.test.bank.db.tables.records.TokenRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Token extends TableImpl<TokenRecord> {

    private static final long serialVersionUID = -1504216451;

    /**
     * The reference instance of <code>bank.Token</code>
     */
    public static final Token TOKEN = new Token();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenRecord> getRecordType() {
        return TokenRecord.class;
    }

    /**
     * The column <code>bank.Token.AdminId</code>.
     */
    public final TableField<TokenRecord, UInteger> ADMINID = createField("AdminId", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>bank.Token.Token</code>.
     */
    public final TableField<TokenRecord, String> TOKEN_ = createField("Token", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>bank.Token</code> table reference
     */
    public Token() {
        this(DSL.name("Token"), null);
    }

    /**
     * Create an aliased <code>bank.Token</code> table reference
     */
    public Token(String alias) {
        this(DSL.name(alias), TOKEN);
    }

    /**
     * Create an aliased <code>bank.Token</code> table reference
     */
    public Token(Name alias) {
        this(alias, TOKEN);
    }

    private Token(Name alias, Table<TokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Token(Name alias, Table<TokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Token(Table<O> child, ForeignKey<O, TokenRecord> key) {
        super(child, key, TOKEN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Bank.BANK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TOKEN_PRIMARY, Indexes.TOKEN_TOKEN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TokenRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_TOKEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TokenRecord> getPrimaryKey() {
        return Keys.KEY_TOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TokenRecord>> getKeys() {
        return Arrays.<UniqueKey<TokenRecord>>asList(Keys.KEY_TOKEN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TokenRecord, ?>>asList(Keys.TOKEN_IBFK_1);
    }

    public Admin admin() {
        return new Admin(this, Keys.TOKEN_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Token as(String alias) {
        return new Token(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Token as(Name alias) {
        return new Token(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Token rename(String name) {
        return new Token(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Token rename(Name name) {
        return new Token(name, null);
    }
}
