/*
 * This file is generated by jOOQ.
 */
package com.test.bank.db.tables;


import com.test.bank.db.Bank;
import com.test.bank.db.Indexes;
import com.test.bank.db.Keys;
import com.test.bank.db.tables.records.AdminroleRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Adminrole extends TableImpl<AdminroleRecord> {

    private static final long serialVersionUID = -2138091080;

    /**
     * The reference instance of <code>bank.AdminRole</code>
     */
    public static final Adminrole ADMINROLE = new Adminrole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminroleRecord> getRecordType() {
        return AdminroleRecord.class;
    }

    /**
     * The column <code>bank.AdminRole.roleId</code>.
     */
    public final TableField<AdminroleRecord, UInteger> ROLEID = createField("roleId", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>bank.AdminRole.adminId</code>.
     */
    public final TableField<AdminroleRecord, UInteger> ADMINID = createField("adminId", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * Create a <code>bank.AdminRole</code> table reference
     */
    public Adminrole() {
        this(DSL.name("AdminRole"), null);
    }

    /**
     * Create an aliased <code>bank.AdminRole</code> table reference
     */
    public Adminrole(String alias) {
        this(DSL.name(alias), ADMINROLE);
    }

    /**
     * Create an aliased <code>bank.AdminRole</code> table reference
     */
    public Adminrole(Name alias) {
        this(alias, ADMINROLE);
    }

    private Adminrole(Name alias, Table<AdminroleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Adminrole(Name alias, Table<AdminroleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Adminrole(Table<O> child, ForeignKey<O, AdminroleRecord> key) {
        super(child, key, ADMINROLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Bank.BANK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADMINROLE_ADMINID, Indexes.ADMINROLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AdminroleRecord> getPrimaryKey() {
        return Keys.KEY_ADMINROLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AdminroleRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminroleRecord>>asList(Keys.KEY_ADMINROLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AdminroleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AdminroleRecord, ?>>asList(Keys.ADMINROLE_IBFK_1);
    }

    public Admin admin() {
        return new Admin(this, Keys.ADMINROLE_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Adminrole as(String alias) {
        return new Adminrole(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Adminrole as(Name alias) {
        return new Adminrole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Adminrole rename(String name) {
        return new Adminrole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Adminrole rename(Name name) {
        return new Adminrole(name, null);
    }
}
